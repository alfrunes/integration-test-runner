// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v28/github"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, org, repo, number, comment
func (_m *Client) CreateComment(ctx context.Context, org string, repo string, number int, comment *github.IssueComment) error {
	ret := _m.Called(ctx, org, repo, number, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) error); ok {
		r0 = rf(ctx, org, repo, number, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePullRequest provides a mock function with given fields: ctx, org, repo, pr
func (_m *Client) CreatePullRequest(ctx context.Context, org string, repo string, pr *github.NewPullRequest) (*github.PullRequest, error) {
	ret := _m.Called(ctx, org, repo, pr)

	var r0 *github.PullRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.NewPullRequest) *github.PullRequest); ok {
		r0 = rf(ctx, org, repo, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.PullRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.NewPullRequest) error); ok {
		r1 = rf(ctx, org, repo, pr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrganizationMember provides a mock function with given fields: ctx, org, user
func (_m *Client) IsOrganizationMember(ctx context.Context, org string, user string) bool {
	ret := _m.Called(ctx, org, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, org, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
